apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    useLibrary 'org.apache.http.legacy'

    android.defaultConfig.vectorDrawables.useSupportLibrary = true

    repositories{
        flatDir{
            dirs 'libs'
        }
        maven {
            url "https://maven.google.com"
        }
    }

    def versionPropsFile = new File('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties props = new Properties()

        props.load(new FileInputStream(versionPropsFile))
        if (props != null && props.containsKey('VERSION_CODE')) {
            def verName = props['VERSION_CODE']
            def verCode = verName.toInteger()
            def admobAppId = getBuildProperty('PRO_ADMOB_APP_ID').replaceAll('^\"|\"$', "")

            defaultConfig {
                project.ext.set("archivesBaseName", "PsiphonAndroid");
                applicationId "com.psiphon3.subscription"
                resValue "string", "tray__authority", "${applicationId}.tray"
                minSdkVersion 14
                targetSdkVersion 28
                versionCode verCode
                versionName verName
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                multiDexEnabled true
                manifestPlaceholders = [ admobAppId:admobAppId ]
            }
        } else {
            throw new GradleException('version.properties found but entries are missing')
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            debuggable true
            pseudoLocalesEnabled true
        }
        release {
            debuggable false
            ndk {
                // ABI configurations of native libraries Gradle should package with the APK.
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
            minifyEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    def propFile = new File('signing.properties')
    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            throw new GradleException('signing.properties found but some entries are missing')
        }
    } else {
        throw new GradleException('signing.properties not found!')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes.each {
        it.buildConfigField 'String', 'SUBSCRIPTION_SPONSOR_ID', getBuildProperty('SUBSCRIPTION_SPONSOR_ID')
        it.buildConfigField 'String', 'IAB_PUBLIC_KEY', getBuildProperty('IAB_PUBLIC_KEY')
        it.buildConfigField 'String', 'ADMOB_APP_ID', getBuildProperty('PRO_ADMOB_APP_ID')
    }
}

def getBuildProperty(String propertyName) {
    def propsFile = rootProject.file('build.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if(props != null && props.containsKey(propertyName)) {
            return props[propertyName];
        } else {
            return "";
        }
    } else {
        throw new GradleException('File \'build.properties\' is missing! Please copy \'build.properties.stub\' to \'build.properties\' and edit the values.')
    }
}

repositories {
    jcenter()
    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation files('libs/jackson-core-2.2.0.jar')
    implementation files('libs/achartengine-1.0.0.jar')
    implementation files('libs/snakeyaml-1.10-android.jar')
    implementation(name: 'ca.psiphon', ext: 'aar')

    implementation project(':tray')

    implementation(name: 'psicashlib-release', ext: 'aar')

    implementation "com.android.support:multidex:$rootProject.ext.multidexVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.ext.androidSupportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.ext.androidSupportLibraryVersion"
    implementation "com.android.support:design:$rootProject.ext.androidSupportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintLayoutVersion"
    implementation "com.android.support:gridlayout-v7:$rootProject.ext.constraintLayoutVersion"

    implementation("com.mopub:mopub-sdk-banner:$rootProject.ext.mopubSdkVersion@aar") {
        transitive = true
    }
    implementation("com.mopub:mopub-sdk-interstitial:$rootProject.ext.mopubSdkVersion@aar") {
        transitive = true
    }
    // MoPub rewarded videos. This will automatically also include interstitials
    implementation("com.mopub:mopub-sdk-rewardedvideo:$rootProject.ext.mopubSdkVersion@aar") {
        transitive = true
    }

    implementation "com.google.android.gms:play-services-ads:$rootProject.ext.playServicesAdsVersion"
    implementation "com.google.android.ads.consent:consent-library:$rootProject.ext.adsConsentLibraryVersion"

    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjavaVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.ext.rxrelayVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:$rootProject.ext.rxbindingSupportVersion"
    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.ext.threetenabpVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"
    implementation "com.android.billingclient:billing:$playStoreBillingClientVersion"


    implementation 'com.github.kinecosystem.kin-sdk-android:kin-sdk-lib:1.0.7'

    api "android.arch.lifecycle:extensions:$rootProject.ext.androidLifecycleExtensionsVersion"

    compileOnly "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"

    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.ext.testRunnerVersion"
}
