/*
 * Copyright (c) 2012, Psiphon Inc.
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package com.psiphon3.psiphonlibrary;

import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.preference.PreferenceManager;

public class EmbeddedValues
{
/*[[[cog
import cog
import utils
cog.outl('public static final String CLIENT_VERSION = "%s";' % utils.get_embedded_value(buildname, 'CLIENT_VERSION'))
cog.outl('public static final String EMBEDDED_SERVER_LIST[] = {"%s"};' % utils.get_embedded_value(buildname, 'EMBEDDED_SERVER_LIST'))
cog.outl('public static final boolean IGNORE_NON_EMBEDDED_SERVER_ENTRIES = %s;' % ('true' if utils.get_embedded_value(buildname, 'IGNORE_NON_EMBEDDED_SERVER_ENTRIES') else 'false'))
cog.outl('public static final String FEEDBACK_ENCRYPTION_PUBLIC_KEY = "%s";' % utils.get_embedded_value(buildname, 'FEEDBACK_ENCRYPTION_PUBLIC_KEY'))
cog.outl('public static final String FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_SERVER = "%s";' % utils.get_embedded_value(buildname, 'FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_SERVER'))
cog.outl('public static final String FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_PATH = "%s";' % utils.get_embedded_value(buildname, 'FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_PATH'))
cog.outl('public static final String FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_SERVER_HEADERS = "%s";' % utils.get_embedded_value(buildname, 'FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_SERVER_HEADERS'))
cog.outl('public static final String PROXIED_WEB_APP_HTTP_AUTH_USERNAME = "%s";' % utils.get_embedded_value(buildname, 'PROXIED_WEB_APP_HTTP_AUTH_USERNAME'))
cog.outl('public static final String PROXIED_WEB_APP_HTTP_AUTH_PASSWORD = "%s";' % utils.get_embedded_value(buildname, 'PROXIED_WEB_APP_HTTP_AUTH_PASSWORD'))
cog.outl('public static final boolean IS_PLAY_STORE_BUILD = %s;' % ('true' if utils.get_embedded_value(buildname, 'IS_PLAY_STORE_BUILD') else 'false'))
cog.outl('public static final String HOME_TAB_URL_EXCLUSIONS[] = {"%s"};' % utils.get_embedded_value(buildname, 'HOME_TAB_URL_EXCLUSIONS'))
cog.outl('public static String PROPAGATION_CHANNEL_ID = "%s";' % utils.get_embedded_value(buildname, 'PROPAGATION_CHANNEL_ID'))
cog.outl('public static String SPONSOR_ID = "%s";' % utils.get_embedded_value(buildname, 'SPONSOR_ID'))
cog.outl('public static String REMOTE_SERVER_LIST_URL = "%s";' % utils.get_embedded_value(buildname, 'REMOTE_SERVER_LIST_URL'))
cog.outl('public static String REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY = "%s";' % utils.get_embedded_value(buildname, 'REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY'))
cog.outl('public static String INFO_LINK_URL = "%s";' % utils.get_embedded_value(buildname, 'INFO_LINK_URL'))
cog.outl('public static String UPGRADE_URL = "%s";' % utils.get_embedded_value(buildname, 'UPGRADE_URL'))
cog.outl('public static String UPGRADE_SIGNATURE_PUBLIC_KEY = "%s";' % utils.get_embedded_value(buildname, 'UPGRADE_SIGNATURE_PUBLIC_KEY'))
cog.outl('public static String GET_NEW_VERSION_URL = "%s";' % utils.get_embedded_value(buildname, 'GET_NEW_VERSION_URL'))
cog.outl('public static String GET_NEW_VERSION_EMAIL = "%s";' % utils.get_embedded_value(buildname, 'GET_NEW_VERSION_EMAIL'))
cog.outl('public static String FAQ_URL = "%s";' % utils.get_embedded_value(buildname, 'FAQ_URL'))
cog.outl('public static String DATA_COLLECTION_INFO_URL = "%s";' % utils.get_embedded_value(buildname, 'DATA_COLLECTION_INFO_URL'))
]]]*/
    public static final String CLIENT_VERSION = "1";

    public static final String[] EMBEDDED_SERVER_LIST = {""};

    public static final boolean IGNORE_NON_EMBEDDED_SERVER_ENTRIES = false;

    public static final String PROXIED_WEB_APP_HTTP_AUTH_USERNAME = "";

    public static final String PROXIED_WEB_APP_HTTP_AUTH_PASSWORD = "";

    public static final boolean IS_PLAY_STORE_BUILD = false;
    
    public static final String[] HOME_TAB_URL_EXCLUSIONS = {""};

    // These values are used when uploading diagnostic info
    public static String FEEDBACK_ENCRYPTION_PUBLIC_KEY = "";
    public static String FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_SERVER = "";
    public static String FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_PATH = "";
    public static String FEEDBACK_DIAGNOSTIC_INFO_UPLOAD_SERVER_HEADERS = "";

    // Following embedded values may be overridden with values from Preferences. This is to prevent
    // Play Store Build instances from overriding embedded values from previously installed APKS.
    // Non-Play Store Build instances always write their values to persistent Preferences, and
    // Play Store Build instances always use persistent Preference values, if they exist.

    public static String PROPAGATION_CHANNEL_ID = "";

    public static String SPONSOR_ID = "";

    public static String REMOTE_SERVER_LIST_URL = "https://s3.amazonaws.com/invalid_bucket_name/server_entries";
    public static String REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY = "";

    // NOTE: Info link may be opened when not tunneled
    public static String INFO_LINK_URL = "https://sites.google.com/a/psiphon3.com/psiphon3/";

    public static String UPGRADE_URL = "";
    public static String UPGRADE_SIGNATURE_PUBLIC_KEY = "";

    // To be shown to the user in the feedback page.
    public static String GET_NEW_VERSION_URL = "https://s3.amazonaws.com/invalid_bucket_name/en/index.html";
    public static String GET_NEW_VERSION_EMAIL = "get@example.com";
    public static String FAQ_URL = "https://s3.amazonaws.com/invalid_bucket_name/en/faq.html";
    public static String DATA_COLLECTION_INFO_URL = "https://s3.amazonaws.com/invalid_bucket_name/en/faq.html#information-collected";

    public static final String MEEK_CLIENT_COOKIE_PAYLOAD_ENCRYPTION_PUBLIC_KEY = "";
    
//[[[end]]]

    private static final String PROPAGATION_CHANNEL_ID_PREFERENCE = "propagationChannelIdPreference";
    private static final String SPONSOR_ID_PREFERENCE = "sponsorIdPreference";
    private static final String REMOTE_SERVER_LIST_URL_PREFERENCE = "remoteServerListUrlPreference";
    private static final String REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY_PREFERENCE = "remoteServerListSignaturePublicKeyPreference";
    private static final String INFO_LINK_URL_PREFERENCE = "infoLinkUrlPreference";
    private static final String UPGRADE_URL_PREFERENCE = "upgradeUrlPreference";
    private static final String UPGRADE_SIGNATURE_PUBLIC_KEY_PREFERENCE = "upgradeSignaturePublicKeyPreference";
    private static final String GET_NEW_VERSION_URL_PREFERENCE = "getNewVersionUrlPreference";
    private static final String GET_NEW_VERSION_EMAIL_PREREFENCE = "getNewVersionEmailPreference";
    private static final String FAQ_URL_PREFERENCE = "faqUrlPreference";
    private static final String DATA_COLLECTION_INFO_URL_PREFERENCE = "dataCollectionInfoUrlPreference";

    public static void initialize(Context context)
    {
        if (!IS_PLAY_STORE_BUILD)
        {
            Editor editor = PreferenceManager.getDefaultSharedPreferences(context).edit();
            editor.putString(PROPAGATION_CHANNEL_ID_PREFERENCE, PROPAGATION_CHANNEL_ID);
            editor.putString(SPONSOR_ID_PREFERENCE, SPONSOR_ID);
            editor.putString(REMOTE_SERVER_LIST_URL_PREFERENCE, REMOTE_SERVER_LIST_URL);
            editor.putString(REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY_PREFERENCE, REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY);
            editor.putString(INFO_LINK_URL_PREFERENCE, INFO_LINK_URL);
            editor.putString(UPGRADE_URL_PREFERENCE, UPGRADE_URL);
            editor.putString(UPGRADE_SIGNATURE_PUBLIC_KEY_PREFERENCE, UPGRADE_SIGNATURE_PUBLIC_KEY);
            editor.putString(GET_NEW_VERSION_URL_PREFERENCE, GET_NEW_VERSION_URL);
            editor.putString(GET_NEW_VERSION_EMAIL_PREREFENCE, GET_NEW_VERSION_EMAIL);
            editor.putString(FAQ_URL_PREFERENCE, FAQ_URL);
            editor.putString(DATA_COLLECTION_INFO_URL_PREFERENCE, DATA_COLLECTION_INFO_URL);
            // Ignore failure
            editor.commit();
        }
        else
        {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            PROPAGATION_CHANNEL_ID = preferences.getString(PROPAGATION_CHANNEL_ID_PREFERENCE, PROPAGATION_CHANNEL_ID);
            SPONSOR_ID = preferences.getString(SPONSOR_ID_PREFERENCE, SPONSOR_ID);
            REMOTE_SERVER_LIST_URL = preferences.getString(REMOTE_SERVER_LIST_URL_PREFERENCE, REMOTE_SERVER_LIST_URL);
            REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY = preferences.getString(REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY_PREFERENCE, REMOTE_SERVER_LIST_SIGNATURE_PUBLIC_KEY);
            INFO_LINK_URL = preferences.getString(INFO_LINK_URL_PREFERENCE, INFO_LINK_URL);
            UPGRADE_URL = preferences.getString(UPGRADE_URL_PREFERENCE, UPGRADE_URL);
            UPGRADE_SIGNATURE_PUBLIC_KEY = preferences.getString(UPGRADE_SIGNATURE_PUBLIC_KEY_PREFERENCE, UPGRADE_SIGNATURE_PUBLIC_KEY);
            GET_NEW_VERSION_URL = preferences.getString(GET_NEW_VERSION_URL_PREFERENCE, GET_NEW_VERSION_URL);
            GET_NEW_VERSION_EMAIL = preferences.getString(GET_NEW_VERSION_EMAIL_PREREFENCE, GET_NEW_VERSION_EMAIL);
            FAQ_URL = preferences.getString(FAQ_URL_PREFERENCE, FAQ_URL);
            DATA_COLLECTION_INFO_URL = preferences.getString(DATA_COLLECTION_INFO_URL_PREFERENCE, DATA_COLLECTION_INFO_URL);
        }
    }

    public static boolean hasEverBeenSideLoaded(Context context)
    {
        if (IS_PLAY_STORE_BUILD)
        {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);
            return preferences.contains(PROPAGATION_CHANNEL_ID_PREFERENCE);
        }
        else
        {
            return true;
        }
    }
}
